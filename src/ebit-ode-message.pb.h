// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebit-ode-messages.proto

#ifndef PROTOBUF_INCLUDED_ebit_2dode_2dmessages_2eproto
#define PROTOBUF_INCLUDED_ebit_2dode_2dmessages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ebit_2dode_2dmessages_2eproto 

namespace protobuf_ebit_2dode_2dmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ebit_2dode_2dmessages_2eproto
namespace EbitODEMessages {
class DiffEqParameters;
class DiffEqParametersDefaultTypeInternal;
extern DiffEqParametersDefaultTypeInternal _DiffEqParameters_default_instance_;
class ErrorEncountered;
class ErrorEncounteredDefaultTypeInternal;
extern ErrorEncounteredDefaultTypeInternal _ErrorEncountered_default_instance_;
class InitialValue;
class InitialValueDefaultTypeInternal;
extern InitialValueDefaultTypeInternal _InitialValue_default_instance_;
class MatrixValue;
class MatrixValueDefaultTypeInternal;
extern MatrixValueDefaultTypeInternal _MatrixValue_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Nuclide;
class NuclideDefaultTypeInternal;
extern NuclideDefaultTypeInternal _Nuclide_default_instance_;
class ProblemParameters;
class ProblemParametersDefaultTypeInternal;
extern ProblemParametersDefaultTypeInternal _ProblemParameters_default_instance_;
class Progress;
class ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SolveODEProblem;
class SolveODEProblemDefaultTypeInternal;
extern SolveODEProblemDefaultTypeInternal _SolveODEProblem_default_instance_;
class SolverParameters;
class SolverParametersDefaultTypeInternal;
extern SolverParametersDefaultTypeInternal _SolverParameters_default_instance_;
class TimeSpan;
class TimeSpanDefaultTypeInternal;
extern TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
class Update;
class UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
class ValuesPerNuclide;
class ValuesPerNuclideDefaultTypeInternal;
extern ValuesPerNuclideDefaultTypeInternal _ValuesPerNuclide_default_instance_;
}  // namespace EbitODEMessages
namespace google {
namespace protobuf {
template<> ::EbitODEMessages::DiffEqParameters* Arena::CreateMaybeMessage<::EbitODEMessages::DiffEqParameters>(Arena*);
template<> ::EbitODEMessages::ErrorEncountered* Arena::CreateMaybeMessage<::EbitODEMessages::ErrorEncountered>(Arena*);
template<> ::EbitODEMessages::InitialValue* Arena::CreateMaybeMessage<::EbitODEMessages::InitialValue>(Arena*);
template<> ::EbitODEMessages::MatrixValue* Arena::CreateMaybeMessage<::EbitODEMessages::MatrixValue>(Arena*);
template<> ::EbitODEMessages::Message* Arena::CreateMaybeMessage<::EbitODEMessages::Message>(Arena*);
template<> ::EbitODEMessages::Nuclide* Arena::CreateMaybeMessage<::EbitODEMessages::Nuclide>(Arena*);
template<> ::EbitODEMessages::ProblemParameters* Arena::CreateMaybeMessage<::EbitODEMessages::ProblemParameters>(Arena*);
template<> ::EbitODEMessages::Progress* Arena::CreateMaybeMessage<::EbitODEMessages::Progress>(Arena*);
template<> ::EbitODEMessages::Result* Arena::CreateMaybeMessage<::EbitODEMessages::Result>(Arena*);
template<> ::EbitODEMessages::SolveODEProblem* Arena::CreateMaybeMessage<::EbitODEMessages::SolveODEProblem>(Arena*);
template<> ::EbitODEMessages::SolverParameters* Arena::CreateMaybeMessage<::EbitODEMessages::SolverParameters>(Arena*);
template<> ::EbitODEMessages::TimeSpan* Arena::CreateMaybeMessage<::EbitODEMessages::TimeSpan>(Arena*);
template<> ::EbitODEMessages::Update* Arena::CreateMaybeMessage<::EbitODEMessages::Update>(Arena*);
template<> ::EbitODEMessages::ValuesPerNuclide* Arena::CreateMaybeMessage<::EbitODEMessages::ValuesPerNuclide>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace EbitODEMessages {

enum Status {
  Idle = 0,
  SolivingODEInProgress = 1
};
bool Status_IsValid(int value);
const Status Status_MIN = Idle;
const Status Status_MAX = SolivingODEInProgress;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum ProblemType {
  ODEProblem = 0
};
bool ProblemType_IsValid(int value);
const ProblemType ProblemType_MIN = ODEProblem;
const ProblemType ProblemType_MAX = ODEProblem;
const int ProblemType_ARRAYSIZE = ProblemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProblemType_descriptor();
inline const ::std::string& ProblemType_Name(ProblemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProblemType_descriptor(), value);
}
inline bool ProblemType_Parse(
    const ::std::string& name, ProblemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProblemType>(
    ProblemType_descriptor(), name, value);
}
enum ReturnCode {
  Default = 0,
  Success = 1,
  MaxIters = 2,
  DtLessThanMin = 3,
  Unstable = 4,
  InitialFailure = 5,
  ConvergenceFailure = 6,
  Failure = 7
};
bool ReturnCode_IsValid(int value);
const ReturnCode ReturnCode_MIN = Default;
const ReturnCode ReturnCode_MAX = Failure;
const int ReturnCode_ARRAYSIZE = ReturnCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor();
inline const ::std::string& ReturnCode_Name(ReturnCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReturnCode_descriptor(), value);
}
inline bool ReturnCode_Parse(
    const ::std::string& name, ReturnCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReturnCode>(
    ReturnCode_descriptor(), name, value);
}
enum MessageType {
  SolveODE = 1,
  ODEResult = 2,
  StatusUpdate = 3,
  StopServer = 4,
  Error = 5
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = SolveODE;
const MessageType MessageType_MAX = Error;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Nuclide : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.Nuclide) */ {
 public:
  Nuclide();
  virtual ~Nuclide();

  Nuclide(const Nuclide& from);

  inline Nuclide& operator=(const Nuclide& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nuclide(Nuclide&& from) noexcept
    : Nuclide() {
    *this = ::std::move(from);
  }

  inline Nuclide& operator=(Nuclide&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nuclide& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nuclide* internal_default_instance() {
    return reinterpret_cast<const Nuclide*>(
               &_Nuclide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Nuclide* other);
  friend void swap(Nuclide& a, Nuclide& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nuclide* New() const final {
    return CreateMaybeMessage<Nuclide>(NULL);
  }

  Nuclide* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Nuclide>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Nuclide& from);
  void MergeFrom(const Nuclide& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nuclide* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 A = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::uint32 a() const;
  void set_a(::google::protobuf::uint32 value);

  // required uint32 Z = 2;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 2;
  ::google::protobuf::uint32 z() const;
  void set_z(::google::protobuf::uint32 value);

  // required uint32 q = 3;
  bool has_q() const;
  void clear_q();
  static const int kQFieldNumber = 3;
  ::google::protobuf::uint32 q() const;
  void set_q(::google::protobuf::uint32 value);

  // required uint32 i = 4;
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 4;
  ::google::protobuf::uint32 i() const;
  void set_i(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.Nuclide)
 private:
  void set_has_a();
  void clear_has_a();
  void set_has_z();
  void clear_has_z();
  void set_has_q();
  void clear_has_q();
  void set_has_i();
  void clear_has_i();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 a_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 q_;
  ::google::protobuf::uint32 i_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.MatrixValue) */ {
 public:
  MatrixValue();
  virtual ~MatrixValue();

  MatrixValue(const MatrixValue& from);

  inline MatrixValue& operator=(const MatrixValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixValue(MatrixValue&& from) noexcept
    : MatrixValue() {
    *this = ::std::move(from);
  }

  inline MatrixValue& operator=(MatrixValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixValue* internal_default_instance() {
    return reinterpret_cast<const MatrixValue*>(
               &_MatrixValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MatrixValue* other);
  friend void swap(MatrixValue& a, MatrixValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixValue* New() const final {
    return CreateMaybeMessage<MatrixValue>(NULL);
  }

  MatrixValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixValue& from);
  void MergeFrom(const MatrixValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // required uint32 row = 2;
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 2;
  ::google::protobuf::uint32 row() const;
  void set_row(::google::protobuf::uint32 value);

  // required uint32 column = 3;
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 3;
  ::google::protobuf::uint32 column() const;
  void set_column(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.MatrixValue)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_row();
  void clear_has_row();
  void set_has_column();
  void clear_has_column();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double value_;
  ::google::protobuf::uint32 row_;
  ::google::protobuf::uint32 column_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.Update) */ {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Update* other);
  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Update* New() const final {
    return CreateMaybeMessage<Update>(NULL);
  }

  Update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .EbitODEMessages.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::EbitODEMessages::Status status() const;
  void set_status(::EbitODEMessages::Status value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.Update)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int status_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Progress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.Progress) */ {
 public:
  Progress();
  virtual ~Progress();

  Progress(const Progress& from);

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(Progress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Progress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Progress* other);
  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Progress* New() const final {
    return CreateMaybeMessage<Progress>(NULL);
  }

  Progress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Progress& from);
  void MergeFrom(const Progress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.Progress)
 private:
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double time_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.TimeSpan) */ {
 public:
  TimeSpan();
  virtual ~TimeSpan();

  TimeSpan(const TimeSpan& from);

  inline TimeSpan& operator=(const TimeSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeSpan(TimeSpan&& from) noexcept
    : TimeSpan() {
    *this = ::std::move(from);
  }

  inline TimeSpan& operator=(TimeSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSpan* internal_default_instance() {
    return reinterpret_cast<const TimeSpan*>(
               &_TimeSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TimeSpan* other);
  friend void swap(TimeSpan& a, TimeSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeSpan* New() const final {
    return CreateMaybeMessage<TimeSpan>(NULL);
  }

  TimeSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeSpan& from);
  void MergeFrom(const TimeSpan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  double start() const;
  void set_start(double value);

  // required double stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  double stop() const;
  void set_stop(double value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.TimeSpan)
 private:
  void set_has_start();
  void clear_has_start();
  void set_has_stop();
  void clear_has_stop();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double start_;
  double stop_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitialValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.InitialValue) */ {
 public:
  InitialValue();
  virtual ~InitialValue();

  InitialValue(const InitialValue& from);

  inline InitialValue& operator=(const InitialValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitialValue(InitialValue&& from) noexcept
    : InitialValue() {
    *this = ::std::move(from);
  }

  inline InitialValue& operator=(InitialValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitialValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialValue* internal_default_instance() {
    return reinterpret_cast<const InitialValue*>(
               &_InitialValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InitialValue* other);
  friend void swap(InitialValue& a, InitialValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitialValue* New() const final {
    return CreateMaybeMessage<InitialValue>(NULL);
  }

  InitialValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitialValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitialValue& from);
  void MergeFrom(const InitialValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double number_of_particles = 2;
  bool has_number_of_particles() const;
  void clear_number_of_particles();
  static const int kNumberOfParticlesFieldNumber = 2;
  double number_of_particles() const;
  void set_number_of_particles(double value);

  // required double temperature_in_ev = 3;
  bool has_temperature_in_ev() const;
  void clear_temperature_in_ev();
  static const int kTemperatureInEvFieldNumber = 3;
  double temperature_in_ev() const;
  void set_temperature_in_ev(double value);

  // required uint32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.InitialValue)
 private:
  void set_has_index();
  void clear_has_index();
  void set_has_number_of_particles();
  void clear_has_number_of_particles();
  void set_has_temperature_in_ev();
  void clear_has_temperature_in_ev();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double number_of_particles_;
  double temperature_in_ev_;
  ::google::protobuf::uint32 index_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiffEqParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.DiffEqParameters) */ {
 public:
  DiffEqParameters();
  virtual ~DiffEqParameters();

  DiffEqParameters(const DiffEqParameters& from);

  inline DiffEqParameters& operator=(const DiffEqParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiffEqParameters(DiffEqParameters&& from) noexcept
    : DiffEqParameters() {
    *this = ::std::move(from);
  }

  inline DiffEqParameters& operator=(DiffEqParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiffEqParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiffEqParameters* internal_default_instance() {
    return reinterpret_cast<const DiffEqParameters*>(
               &_DiffEqParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DiffEqParameters* other);
  friend void swap(DiffEqParameters& a, DiffEqParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiffEqParameters* New() const final {
    return CreateMaybeMessage<DiffEqParameters>(NULL);
  }

  DiffEqParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiffEqParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiffEqParameters& from);
  void MergeFrom(const DiffEqParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffEqParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double qVe = 1;
  int qve_size() const;
  void clear_qve();
  static const int kQVeFieldNumber = 1;
  double qve(int index) const;
  void set_qve(int index, double value);
  void add_qve(double value);
  const ::google::protobuf::RepeatedField< double >&
      qve() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_qve();

  // repeated double qVt = 2;
  int qvt_size() const;
  void clear_qvt();
  static const int kQVtFieldNumber = 2;
  double qvt(int index) const;
  void set_qvt(int index, double value);
  void add_qvt(double value);
  const ::google::protobuf::RepeatedField< double >&
      qvt() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_qvt();

  // repeated double mass_number = 3;
  int mass_number_size() const;
  void clear_mass_number();
  static const int kMassNumberFieldNumber = 3;
  double mass_number(int index) const;
  void set_mass_number(int index, double value);
  void add_mass_number(double value);
  const ::google::protobuf::RepeatedField< double >&
      mass_number() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_mass_number();

  // repeated double spitzer_divided_by_overlap = 4;
  int spitzer_divided_by_overlap_size() const;
  void clear_spitzer_divided_by_overlap();
  static const int kSpitzerDividedByOverlapFieldNumber = 4;
  double spitzer_divided_by_overlap(int index) const;
  void set_spitzer_divided_by_overlap(int index, double value);
  void add_spitzer_divided_by_overlap(double value);
  const ::google::protobuf::RepeatedField< double >&
      spitzer_divided_by_overlap() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_spitzer_divided_by_overlap();

  // repeated .EbitODEMessages.MatrixValue inverted_collision_constant = 6;
  int inverted_collision_constant_size() const;
  void clear_inverted_collision_constant();
  static const int kInvertedCollisionConstantFieldNumber = 6;
  ::EbitODEMessages::MatrixValue* mutable_inverted_collision_constant(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
      mutable_inverted_collision_constant();
  const ::EbitODEMessages::MatrixValue& inverted_collision_constant(int index) const;
  ::EbitODEMessages::MatrixValue* add_inverted_collision_constant();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
      inverted_collision_constant() const;

  // repeated .EbitODEMessages.MatrixValue dCharge_ex_divided_by_N_times_tau = 7;
  int dcharge_ex_divided_by_n_times_tau_size() const;
  void clear_dcharge_ex_divided_by_n_times_tau();
  static const int kDChargeExDividedByNTimesTauFieldNumber = 7;
  ::EbitODEMessages::MatrixValue* mutable_dcharge_ex_divided_by_n_times_tau(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
      mutable_dcharge_ex_divided_by_n_times_tau();
  const ::EbitODEMessages::MatrixValue& dcharge_ex_divided_by_n_times_tau(int index) const;
  ::EbitODEMessages::MatrixValue* add_dcharge_ex_divided_by_n_times_tau();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
      dcharge_ex_divided_by_n_times_tau() const;

  // repeated .EbitODEMessages.MatrixValue rate_of_change_divided_by_N = 8;
  int rate_of_change_divided_by_n_size() const;
  void clear_rate_of_change_divided_by_n();
  static const int kRateOfChangeDividedByNFieldNumber = 8;
  ::EbitODEMessages::MatrixValue* mutable_rate_of_change_divided_by_n(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
      mutable_rate_of_change_divided_by_n();
  const ::EbitODEMessages::MatrixValue& rate_of_change_divided_by_n(int index) const;
  ::EbitODEMessages::MatrixValue* add_rate_of_change_divided_by_n();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
      rate_of_change_divided_by_n() const;

  // repeated .EbitODEMessages.InitialValue initial_values = 10;
  int initial_values_size() const;
  void clear_initial_values();
  static const int kInitialValuesFieldNumber = 10;
  ::EbitODEMessages::InitialValue* mutable_initial_values(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::InitialValue >*
      mutable_initial_values();
  const ::EbitODEMessages::InitialValue& initial_values(int index) const;
  ::EbitODEMessages::InitialValue* add_initial_values();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::InitialValue >&
      initial_values() const;

  // repeated double source_terms_n = 13;
  int source_terms_n_size() const;
  void clear_source_terms_n();
  static const int kSourceTermsNFieldNumber = 13;
  double source_terms_n(int index) const;
  void set_source_terms_n(int index, double value);
  void add_source_terms_n(double value);
  const ::google::protobuf::RepeatedField< double >&
      source_terms_n() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_source_terms_n();

  // repeated double source_terms_kt = 14;
  int source_terms_kt_size() const;
  void clear_source_terms_kt();
  static const int kSourceTermsKtFieldNumber = 14;
  double source_terms_kt(int index) const;
  void set_source_terms_kt(int index, double value);
  void add_source_terms_kt(double value);
  const ::google::protobuf::RepeatedField< double >&
      source_terms_kt() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_source_terms_kt();

  // repeated double q = 15;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 15;
  double q(int index) const;
  void set_q(int index, double value);
  void add_q(double value);
  const ::google::protobuf::RepeatedField< double >&
      q() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_q();

  // required double initial_temperature = 11;
  bool has_initial_temperature() const;
  void clear_initial_temperature();
  static const int kInitialTemperatureFieldNumber = 11;
  double initial_temperature() const;
  void set_initial_temperature(double value);

  // required double minimum_N = 12;
  bool has_minimum_n() const;
  void clear_minimum_n();
  static const int kMinimumNFieldNumber = 12;
  double minimum_n() const;
  void set_minimum_n(double value);

  // required double V_0 = 16;
  bool has_v_0() const;
  void clear_v_0();
  static const int kV0FieldNumber = 16;
  double v_0() const;
  void set_v_0(double value);

  // required double r_e = 17;
  bool has_r_e() const;
  void clear_r_e();
  static const int kREFieldNumber = 17;
  double r_e() const;
  void set_r_e(double value);

  // required double r_dt = 18;
  bool has_r_dt() const;
  void clear_r_dt();
  static const int kRDtFieldNumber = 18;
  double r_dt() const;
  void set_r_dt(double value);

  // required double l_dt = 19;
  bool has_l_dt() const;
  void clear_l_dt();
  static const int kLDtFieldNumber = 19;
  double l_dt() const;
  void set_l_dt(double value);

  // required uint32 no_dimensions = 9;
  bool has_no_dimensions() const;
  void clear_no_dimensions();
  static const int kNoDimensionsFieldNumber = 9;
  ::google::protobuf::uint32 no_dimensions() const;
  void set_no_dimensions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.DiffEqParameters)
 private:
  void set_has_no_dimensions();
  void clear_has_no_dimensions();
  void set_has_v_0();
  void clear_has_v_0();
  void set_has_r_e();
  void clear_has_r_e();
  void set_has_r_dt();
  void clear_has_r_dt();
  void set_has_l_dt();
  void clear_has_l_dt();
  void set_has_initial_temperature();
  void clear_has_initial_temperature();
  void set_has_minimum_n();
  void clear_has_minimum_n();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > qve_;
  ::google::protobuf::RepeatedField< double > qvt_;
  ::google::protobuf::RepeatedField< double > mass_number_;
  ::google::protobuf::RepeatedField< double > spitzer_divided_by_overlap_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue > inverted_collision_constant_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue > dcharge_ex_divided_by_n_times_tau_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue > rate_of_change_divided_by_n_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::InitialValue > initial_values_;
  ::google::protobuf::RepeatedField< double > source_terms_n_;
  ::google::protobuf::RepeatedField< double > source_terms_kt_;
  ::google::protobuf::RepeatedField< double > q_;
  double initial_temperature_;
  double minimum_n_;
  double v_0_;
  double r_e_;
  double r_dt_;
  double l_dt_;
  ::google::protobuf::uint32 no_dimensions_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProblemParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.ProblemParameters) */ {
 public:
  ProblemParameters();
  virtual ~ProblemParameters();

  ProblemParameters(const ProblemParameters& from);

  inline ProblemParameters& operator=(const ProblemParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProblemParameters(ProblemParameters&& from) noexcept
    : ProblemParameters() {
    *this = ::std::move(from);
  }

  inline ProblemParameters& operator=(ProblemParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProblemParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProblemParameters* internal_default_instance() {
    return reinterpret_cast<const ProblemParameters*>(
               &_ProblemParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ProblemParameters* other);
  friend void swap(ProblemParameters& a, ProblemParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProblemParameters* New() const final {
    return CreateMaybeMessage<ProblemParameters>(NULL);
  }

  ProblemParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProblemParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProblemParameters& from);
  void MergeFrom(const ProblemParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProblemParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .EbitODEMessages.TimeSpan time_span = 2;
  bool has_time_span() const;
  void clear_time_span();
  static const int kTimeSpanFieldNumber = 2;
  private:
  const ::EbitODEMessages::TimeSpan& _internal_time_span() const;
  public:
  const ::EbitODEMessages::TimeSpan& time_span() const;
  ::EbitODEMessages::TimeSpan* release_time_span();
  ::EbitODEMessages::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::EbitODEMessages::TimeSpan* time_span);

  // required .EbitODEMessages.ProblemType problem_type = 1;
  bool has_problem_type() const;
  void clear_problem_type();
  static const int kProblemTypeFieldNumber = 1;
  ::EbitODEMessages::ProblemType problem_type() const;
  void set_problem_type(::EbitODEMessages::ProblemType value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.ProblemParameters)
 private:
  void set_has_problem_type();
  void clear_has_problem_type();
  void set_has_time_span();
  void clear_has_time_span();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::EbitODEMessages::TimeSpan* time_span_;
  int problem_type_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolverParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.SolverParameters) */ {
 public:
  SolverParameters();
  virtual ~SolverParameters();

  SolverParameters(const SolverParameters& from);

  inline SolverParameters& operator=(const SolverParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverParameters(SolverParameters&& from) noexcept
    : SolverParameters() {
    *this = ::std::move(from);
  }

  inline SolverParameters& operator=(SolverParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverParameters* internal_default_instance() {
    return reinterpret_cast<const SolverParameters*>(
               &_SolverParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SolverParameters* other);
  friend void swap(SolverParameters& a, SolverParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverParameters* New() const final {
    return CreateMaybeMessage<SolverParameters>(NULL);
  }

  SolverParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolverParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolverParameters& from);
  void MergeFrom(const SolverParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double saveat = 1;
  int saveat_size() const;
  void clear_saveat();
  static const int kSaveatFieldNumber = 1;
  double saveat(int index) const;
  void set_saveat(int index, double value);
  void add_saveat(double value);
  const ::google::protobuf::RepeatedField< double >&
      saveat() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_saveat();

  // @@protoc_insertion_point(class_scope:EbitODEMessages.SolverParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > saveat_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SolveODEProblem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.SolveODEProblem) */ {
 public:
  SolveODEProblem();
  virtual ~SolveODEProblem();

  SolveODEProblem(const SolveODEProblem& from);

  inline SolveODEProblem& operator=(const SolveODEProblem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolveODEProblem(SolveODEProblem&& from) noexcept
    : SolveODEProblem() {
    *this = ::std::move(from);
  }

  inline SolveODEProblem& operator=(SolveODEProblem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolveODEProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolveODEProblem* internal_default_instance() {
    return reinterpret_cast<const SolveODEProblem*>(
               &_SolveODEProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SolveODEProblem* other);
  friend void swap(SolveODEProblem& a, SolveODEProblem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolveODEProblem* New() const final {
    return CreateMaybeMessage<SolveODEProblem>(NULL);
  }

  SolveODEProblem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SolveODEProblem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SolveODEProblem& from);
  void MergeFrom(const SolveODEProblem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveODEProblem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EbitODEMessages.Nuclide nuclides = 1;
  int nuclides_size() const;
  void clear_nuclides();
  static const int kNuclidesFieldNumber = 1;
  ::EbitODEMessages::Nuclide* mutable_nuclides(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::Nuclide >*
      mutable_nuclides();
  const ::EbitODEMessages::Nuclide& nuclides(int index) const;
  ::EbitODEMessages::Nuclide* add_nuclides();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::Nuclide >&
      nuclides() const;

  // required .EbitODEMessages.ProblemParameters problem_parameters = 2;
  bool has_problem_parameters() const;
  void clear_problem_parameters();
  static const int kProblemParametersFieldNumber = 2;
  private:
  const ::EbitODEMessages::ProblemParameters& _internal_problem_parameters() const;
  public:
  const ::EbitODEMessages::ProblemParameters& problem_parameters() const;
  ::EbitODEMessages::ProblemParameters* release_problem_parameters();
  ::EbitODEMessages::ProblemParameters* mutable_problem_parameters();
  void set_allocated_problem_parameters(::EbitODEMessages::ProblemParameters* problem_parameters);

  // required .EbitODEMessages.DiffEqParameters diff_eq_parameters = 3;
  bool has_diff_eq_parameters() const;
  void clear_diff_eq_parameters();
  static const int kDiffEqParametersFieldNumber = 3;
  private:
  const ::EbitODEMessages::DiffEqParameters& _internal_diff_eq_parameters() const;
  public:
  const ::EbitODEMessages::DiffEqParameters& diff_eq_parameters() const;
  ::EbitODEMessages::DiffEqParameters* release_diff_eq_parameters();
  ::EbitODEMessages::DiffEqParameters* mutable_diff_eq_parameters();
  void set_allocated_diff_eq_parameters(::EbitODEMessages::DiffEqParameters* diff_eq_parameters);

  // required .EbitODEMessages.SolverParameters solver_parameters = 4;
  bool has_solver_parameters() const;
  void clear_solver_parameters();
  static const int kSolverParametersFieldNumber = 4;
  private:
  const ::EbitODEMessages::SolverParameters& _internal_solver_parameters() const;
  public:
  const ::EbitODEMessages::SolverParameters& solver_parameters() const;
  ::EbitODEMessages::SolverParameters* release_solver_parameters();
  ::EbitODEMessages::SolverParameters* mutable_solver_parameters();
  void set_allocated_solver_parameters(::EbitODEMessages::SolverParameters* solver_parameters);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.SolveODEProblem)
 private:
  void set_has_problem_parameters();
  void clear_has_problem_parameters();
  void set_has_diff_eq_parameters();
  void clear_has_diff_eq_parameters();
  void set_has_solver_parameters();
  void clear_has_solver_parameters();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::Nuclide > nuclides_;
  ::EbitODEMessages::ProblemParameters* problem_parameters_;
  ::EbitODEMessages::DiffEqParameters* diff_eq_parameters_;
  ::EbitODEMessages::SolverParameters* solver_parameters_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValuesPerNuclide : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.ValuesPerNuclide) */ {
 public:
  ValuesPerNuclide();
  virtual ~ValuesPerNuclide();

  ValuesPerNuclide(const ValuesPerNuclide& from);

  inline ValuesPerNuclide& operator=(const ValuesPerNuclide& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValuesPerNuclide(ValuesPerNuclide&& from) noexcept
    : ValuesPerNuclide() {
    *this = ::std::move(from);
  }

  inline ValuesPerNuclide& operator=(ValuesPerNuclide&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValuesPerNuclide& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValuesPerNuclide* internal_default_instance() {
    return reinterpret_cast<const ValuesPerNuclide*>(
               &_ValuesPerNuclide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ValuesPerNuclide* other);
  friend void swap(ValuesPerNuclide& a, ValuesPerNuclide& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValuesPerNuclide* New() const final {
    return CreateMaybeMessage<ValuesPerNuclide>(NULL);
  }

  ValuesPerNuclide* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValuesPerNuclide>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValuesPerNuclide& from);
  void MergeFrom(const ValuesPerNuclide& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValuesPerNuclide* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // required .EbitODEMessages.Nuclide nuclide = 1;
  bool has_nuclide() const;
  void clear_nuclide();
  static const int kNuclideFieldNumber = 1;
  private:
  const ::EbitODEMessages::Nuclide& _internal_nuclide() const;
  public:
  const ::EbitODEMessages::Nuclide& nuclide() const;
  ::EbitODEMessages::Nuclide* release_nuclide();
  ::EbitODEMessages::Nuclide* mutable_nuclide();
  void set_allocated_nuclide(::EbitODEMessages::Nuclide* nuclide);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.ValuesPerNuclide)
 private:
  void set_has_nuclide();
  void clear_has_nuclide();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > values_;
  ::EbitODEMessages::Nuclide* nuclide_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(NULL);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double times = 5;
  int times_size() const;
  void clear_times();
  static const int kTimesFieldNumber = 5;
  double times(int index) const;
  void set_times(int index, double value);
  void add_times(double value);
  const ::google::protobuf::RepeatedField< double >&
      times() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_times();

  // repeated .EbitODEMessages.ValuesPerNuclide n = 6;
  int n_size() const;
  void clear_n();
  static const int kNFieldNumber = 6;
  ::EbitODEMessages::ValuesPerNuclide* mutable_n(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >*
      mutable_n();
  const ::EbitODEMessages::ValuesPerNuclide& n(int index) const;
  ::EbitODEMessages::ValuesPerNuclide* add_n();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >&
      n() const;

  // repeated .EbitODEMessages.ValuesPerNuclide kT = 7;
  int kt_size() const;
  void clear_kt();
  static const int kKTFieldNumber = 7;
  ::EbitODEMessages::ValuesPerNuclide* mutable_kt(int index);
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >*
      mutable_kt();
  const ::EbitODEMessages::ValuesPerNuclide& kt(int index) const;
  ::EbitODEMessages::ValuesPerNuclide* add_kt();
  const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >&
      kt() const;

  // required .EbitODEMessages.SolveODEProblem problem = 1;
  bool has_problem() const;
  void clear_problem();
  static const int kProblemFieldNumber = 1;
  private:
  const ::EbitODEMessages::SolveODEProblem& _internal_problem() const;
  public:
  const ::EbitODEMessages::SolveODEProblem& problem() const;
  ::EbitODEMessages::SolveODEProblem* release_problem();
  ::EbitODEMessages::SolveODEProblem* mutable_problem();
  void set_allocated_problem(::EbitODEMessages::SolveODEProblem* problem);

  // required double start_time = 3;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  double start_time() const;
  void set_start_time(double value);

  // required double stop_time = 4;
  bool has_stop_time() const;
  void clear_stop_time();
  static const int kStopTimeFieldNumber = 4;
  double stop_time() const;
  void set_stop_time(double value);

  // required .EbitODEMessages.ReturnCode return_code = 2;
  bool has_return_code() const;
  void clear_return_code();
  static const int kReturnCodeFieldNumber = 2;
  ::EbitODEMessages::ReturnCode return_code() const;
  void set_return_code(::EbitODEMessages::ReturnCode value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.Result)
 private:
  void set_has_problem();
  void clear_has_problem();
  void set_has_return_code();
  void clear_has_return_code();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_stop_time();
  void clear_has_stop_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > times_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide > n_;
  ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide > kt_;
  ::EbitODEMessages::SolveODEProblem* problem_;
  double start_time_;
  double stop_time_;
  int return_code_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorEncountered : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.ErrorEncountered) */ {
 public:
  ErrorEncountered();
  virtual ~ErrorEncountered();

  ErrorEncountered(const ErrorEncountered& from);

  inline ErrorEncountered& operator=(const ErrorEncountered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorEncountered(ErrorEncountered&& from) noexcept
    : ErrorEncountered() {
    *this = ::std::move(from);
  }

  inline ErrorEncountered& operator=(ErrorEncountered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorEncountered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorEncountered* internal_default_instance() {
    return reinterpret_cast<const ErrorEncountered*>(
               &_ErrorEncountered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ErrorEncountered* other);
  friend void swap(ErrorEncountered& a, ErrorEncountered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorEncountered* New() const final {
    return CreateMaybeMessage<ErrorEncountered>(NULL);
  }

  ErrorEncountered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorEncountered>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorEncountered& from);
  void MergeFrom(const ErrorEncountered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorEncountered* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.ErrorEncountered)
 private:
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EbitODEMessages.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .EbitODEMessages.SolveODEProblem ode_problem = 2;
  bool has_ode_problem() const;
  void clear_ode_problem();
  static const int kOdeProblemFieldNumber = 2;
  private:
  const ::EbitODEMessages::SolveODEProblem& _internal_ode_problem() const;
  public:
  const ::EbitODEMessages::SolveODEProblem& ode_problem() const;
  ::EbitODEMessages::SolveODEProblem* release_ode_problem();
  ::EbitODEMessages::SolveODEProblem* mutable_ode_problem();
  void set_allocated_ode_problem(::EbitODEMessages::SolveODEProblem* ode_problem);

  // optional .EbitODEMessages.Result ode_result = 3;
  bool has_ode_result() const;
  void clear_ode_result();
  static const int kOdeResultFieldNumber = 3;
  private:
  const ::EbitODEMessages::Result& _internal_ode_result() const;
  public:
  const ::EbitODEMessages::Result& ode_result() const;
  ::EbitODEMessages::Result* release_ode_result();
  ::EbitODEMessages::Result* mutable_ode_result();
  void set_allocated_ode_result(::EbitODEMessages::Result* ode_result);

  // optional .EbitODEMessages.ErrorEncountered err = 5;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 5;
  private:
  const ::EbitODEMessages::ErrorEncountered& _internal_err() const;
  public:
  const ::EbitODEMessages::ErrorEncountered& err() const;
  ::EbitODEMessages::ErrorEncountered* release_err();
  ::EbitODEMessages::ErrorEncountered* mutable_err();
  void set_allocated_err(::EbitODEMessages::ErrorEncountered* err);

  // optional .EbitODEMessages.Progress progress = 6;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 6;
  private:
  const ::EbitODEMessages::Progress& _internal_progress() const;
  public:
  const ::EbitODEMessages::Progress& progress() const;
  ::EbitODEMessages::Progress* release_progress();
  ::EbitODEMessages::Progress* mutable_progress();
  void set_allocated_progress(::EbitODEMessages::Progress* progress);

  // optional .EbitODEMessages.Status status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::EbitODEMessages::Status status() const;
  void set_status(::EbitODEMessages::Status value);

  // required .EbitODEMessages.MessageType msg_type = 1;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::EbitODEMessages::MessageType msg_type() const;
  void set_msg_type(::EbitODEMessages::MessageType value);

  // @@protoc_insertion_point(class_scope:EbitODEMessages.Message)
 private:
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_ode_problem();
  void clear_has_ode_problem();
  void set_has_ode_result();
  void clear_has_ode_result();
  void set_has_status();
  void clear_has_status();
  void set_has_err();
  void clear_has_err();
  void set_has_progress();
  void clear_has_progress();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::EbitODEMessages::SolveODEProblem* ode_problem_;
  ::EbitODEMessages::Result* ode_result_;
  ::EbitODEMessages::ErrorEncountered* err_;
  ::EbitODEMessages::Progress* progress_;
  int status_;
  int msg_type_;
  friend struct ::protobuf_ebit_2dode_2dmessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Nuclide

// required uint32 A = 1;
inline bool Nuclide::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Nuclide::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Nuclide::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Nuclide::clear_a() {
  a_ = 0u;
  clear_has_a();
}
inline ::google::protobuf::uint32 Nuclide::a() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Nuclide.A)
  return a_;
}
inline void Nuclide::set_a(::google::protobuf::uint32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Nuclide.A)
}

// required uint32 Z = 2;
inline bool Nuclide::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Nuclide::set_has_z() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Nuclide::clear_has_z() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Nuclide::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 Nuclide::z() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Nuclide.Z)
  return z_;
}
inline void Nuclide::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Nuclide.Z)
}

// required uint32 q = 3;
inline bool Nuclide::has_q() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Nuclide::set_has_q() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Nuclide::clear_has_q() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Nuclide::clear_q() {
  q_ = 0u;
  clear_has_q();
}
inline ::google::protobuf::uint32 Nuclide::q() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Nuclide.q)
  return q_;
}
inline void Nuclide::set_q(::google::protobuf::uint32 value) {
  set_has_q();
  q_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Nuclide.q)
}

// required uint32 i = 4;
inline bool Nuclide::has_i() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Nuclide::set_has_i() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Nuclide::clear_has_i() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Nuclide::clear_i() {
  i_ = 0u;
  clear_has_i();
}
inline ::google::protobuf::uint32 Nuclide::i() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Nuclide.i)
  return i_;
}
inline void Nuclide::set_i(::google::protobuf::uint32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Nuclide.i)
}

// -------------------------------------------------------------------

// MatrixValue

// required double value = 1;
inline bool MatrixValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixValue::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatrixValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatrixValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double MatrixValue::value() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.MatrixValue.value)
  return value_;
}
inline void MatrixValue::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.MatrixValue.value)
}

// required uint32 row = 2;
inline bool MatrixValue::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatrixValue::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatrixValue::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatrixValue::clear_row() {
  row_ = 0u;
  clear_has_row();
}
inline ::google::protobuf::uint32 MatrixValue::row() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.MatrixValue.row)
  return row_;
}
inline void MatrixValue::set_row(::google::protobuf::uint32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.MatrixValue.row)
}

// required uint32 column = 3;
inline bool MatrixValue::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatrixValue::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatrixValue::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatrixValue::clear_column() {
  column_ = 0u;
  clear_has_column();
}
inline ::google::protobuf::uint32 MatrixValue::column() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.MatrixValue.column)
  return column_;
}
inline void MatrixValue::set_column(::google::protobuf::uint32 value) {
  set_has_column();
  column_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.MatrixValue.column)
}

// -------------------------------------------------------------------

// Update

// required .EbitODEMessages.Status status = 1;
inline bool Update::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::EbitODEMessages::Status Update::status() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Update.status)
  return static_cast< ::EbitODEMessages::Status >(status_);
}
inline void Update::set_status(::EbitODEMessages::Status value) {
  assert(::EbitODEMessages::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Update.status)
}

// required string message = 2;
inline bool Update::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Update::message() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Update.message)
  return message_.GetNoArena();
}
inline void Update::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.Update.message)
}
#if LANG_CXX11
inline void Update::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EbitODEMessages.Update.message)
}
#endif
inline void Update::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EbitODEMessages.Update.message)
}
inline void Update::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EbitODEMessages.Update.message)
}
inline ::std::string* Update::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Update.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Update::release_message() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Update.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Update::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Update.message)
}

// -------------------------------------------------------------------

// Progress

// required double time = 1;
inline bool Progress::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Progress::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Progress::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Progress::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Progress::time() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Progress.time)
  return time_;
}
inline void Progress::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Progress.time)
}

// -------------------------------------------------------------------

// TimeSpan

// required double start = 1;
inline bool TimeSpan::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSpan::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSpan::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSpan::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline double TimeSpan::start() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.TimeSpan.start)
  return start_;
}
inline void TimeSpan::set_start(double value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.TimeSpan.start)
}

// required double stop = 2;
inline bool TimeSpan::has_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSpan::set_has_stop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSpan::clear_has_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSpan::clear_stop() {
  stop_ = 0;
  clear_has_stop();
}
inline double TimeSpan::stop() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.TimeSpan.stop)
  return stop_;
}
inline void TimeSpan::set_stop(double value) {
  set_has_stop();
  stop_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.TimeSpan.stop)
}

// -------------------------------------------------------------------

// InitialValue

// required uint32 index = 1;
inline bool InitialValue::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitialValue::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitialValue::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitialValue::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 InitialValue::index() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.InitialValue.index)
  return index_;
}
inline void InitialValue::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.InitialValue.index)
}

// required double number_of_particles = 2;
inline bool InitialValue::has_number_of_particles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitialValue::set_has_number_of_particles() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitialValue::clear_has_number_of_particles() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitialValue::clear_number_of_particles() {
  number_of_particles_ = 0;
  clear_has_number_of_particles();
}
inline double InitialValue::number_of_particles() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.InitialValue.number_of_particles)
  return number_of_particles_;
}
inline void InitialValue::set_number_of_particles(double value) {
  set_has_number_of_particles();
  number_of_particles_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.InitialValue.number_of_particles)
}

// required double temperature_in_ev = 3;
inline bool InitialValue::has_temperature_in_ev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitialValue::set_has_temperature_in_ev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitialValue::clear_has_temperature_in_ev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitialValue::clear_temperature_in_ev() {
  temperature_in_ev_ = 0;
  clear_has_temperature_in_ev();
}
inline double InitialValue::temperature_in_ev() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.InitialValue.temperature_in_ev)
  return temperature_in_ev_;
}
inline void InitialValue::set_temperature_in_ev(double value) {
  set_has_temperature_in_ev();
  temperature_in_ev_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.InitialValue.temperature_in_ev)
}

// -------------------------------------------------------------------

// DiffEqParameters

// repeated double qVe = 1;
inline int DiffEqParameters::qve_size() const {
  return qve_.size();
}
inline void DiffEqParameters::clear_qve() {
  qve_.Clear();
}
inline double DiffEqParameters::qve(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.qVe)
  return qve_.Get(index);
}
inline void DiffEqParameters::set_qve(int index, double value) {
  qve_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.qVe)
}
inline void DiffEqParameters::add_qve(double value) {
  qve_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.qVe)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::qve() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.qVe)
  return qve_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_qve() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.qVe)
  return &qve_;
}

// repeated double qVt = 2;
inline int DiffEqParameters::qvt_size() const {
  return qvt_.size();
}
inline void DiffEqParameters::clear_qvt() {
  qvt_.Clear();
}
inline double DiffEqParameters::qvt(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.qVt)
  return qvt_.Get(index);
}
inline void DiffEqParameters::set_qvt(int index, double value) {
  qvt_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.qVt)
}
inline void DiffEqParameters::add_qvt(double value) {
  qvt_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.qVt)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::qvt() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.qVt)
  return qvt_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_qvt() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.qVt)
  return &qvt_;
}

// repeated double mass_number = 3;
inline int DiffEqParameters::mass_number_size() const {
  return mass_number_.size();
}
inline void DiffEqParameters::clear_mass_number() {
  mass_number_.Clear();
}
inline double DiffEqParameters::mass_number(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.mass_number)
  return mass_number_.Get(index);
}
inline void DiffEqParameters::set_mass_number(int index, double value) {
  mass_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.mass_number)
}
inline void DiffEqParameters::add_mass_number(double value) {
  mass_number_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.mass_number)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::mass_number() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.mass_number)
  return mass_number_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_mass_number() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.mass_number)
  return &mass_number_;
}

// repeated double spitzer_divided_by_overlap = 4;
inline int DiffEqParameters::spitzer_divided_by_overlap_size() const {
  return spitzer_divided_by_overlap_.size();
}
inline void DiffEqParameters::clear_spitzer_divided_by_overlap() {
  spitzer_divided_by_overlap_.Clear();
}
inline double DiffEqParameters::spitzer_divided_by_overlap(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.spitzer_divided_by_overlap)
  return spitzer_divided_by_overlap_.Get(index);
}
inline void DiffEqParameters::set_spitzer_divided_by_overlap(int index, double value) {
  spitzer_divided_by_overlap_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.spitzer_divided_by_overlap)
}
inline void DiffEqParameters::add_spitzer_divided_by_overlap(double value) {
  spitzer_divided_by_overlap_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.spitzer_divided_by_overlap)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::spitzer_divided_by_overlap() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.spitzer_divided_by_overlap)
  return spitzer_divided_by_overlap_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_spitzer_divided_by_overlap() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.spitzer_divided_by_overlap)
  return &spitzer_divided_by_overlap_;
}

// repeated double q = 15;
inline int DiffEqParameters::q_size() const {
  return q_.size();
}
inline void DiffEqParameters::clear_q() {
  q_.Clear();
}
inline double DiffEqParameters::q(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.q)
  return q_.Get(index);
}
inline void DiffEqParameters::set_q(int index, double value) {
  q_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.q)
}
inline void DiffEqParameters::add_q(double value) {
  q_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.q)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::q() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.q)
  return q_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.q)
  return &q_;
}

// repeated .EbitODEMessages.MatrixValue inverted_collision_constant = 6;
inline int DiffEqParameters::inverted_collision_constant_size() const {
  return inverted_collision_constant_.size();
}
inline void DiffEqParameters::clear_inverted_collision_constant() {
  inverted_collision_constant_.Clear();
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::mutable_inverted_collision_constant(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.DiffEqParameters.inverted_collision_constant)
  return inverted_collision_constant_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
DiffEqParameters::mutable_inverted_collision_constant() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.inverted_collision_constant)
  return &inverted_collision_constant_;
}
inline const ::EbitODEMessages::MatrixValue& DiffEqParameters::inverted_collision_constant(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.inverted_collision_constant)
  return inverted_collision_constant_.Get(index);
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::add_inverted_collision_constant() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.inverted_collision_constant)
  return inverted_collision_constant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
DiffEqParameters::inverted_collision_constant() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.inverted_collision_constant)
  return inverted_collision_constant_;
}

// repeated .EbitODEMessages.MatrixValue dCharge_ex_divided_by_N_times_tau = 7;
inline int DiffEqParameters::dcharge_ex_divided_by_n_times_tau_size() const {
  return dcharge_ex_divided_by_n_times_tau_.size();
}
inline void DiffEqParameters::clear_dcharge_ex_divided_by_n_times_tau() {
  dcharge_ex_divided_by_n_times_tau_.Clear();
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::mutable_dcharge_ex_divided_by_n_times_tau(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.DiffEqParameters.dCharge_ex_divided_by_N_times_tau)
  return dcharge_ex_divided_by_n_times_tau_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
DiffEqParameters::mutable_dcharge_ex_divided_by_n_times_tau() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.dCharge_ex_divided_by_N_times_tau)
  return &dcharge_ex_divided_by_n_times_tau_;
}
inline const ::EbitODEMessages::MatrixValue& DiffEqParameters::dcharge_ex_divided_by_n_times_tau(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.dCharge_ex_divided_by_N_times_tau)
  return dcharge_ex_divided_by_n_times_tau_.Get(index);
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::add_dcharge_ex_divided_by_n_times_tau() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.dCharge_ex_divided_by_N_times_tau)
  return dcharge_ex_divided_by_n_times_tau_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
DiffEqParameters::dcharge_ex_divided_by_n_times_tau() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.dCharge_ex_divided_by_N_times_tau)
  return dcharge_ex_divided_by_n_times_tau_;
}

// repeated .EbitODEMessages.MatrixValue rate_of_change_divided_by_N = 8;
inline int DiffEqParameters::rate_of_change_divided_by_n_size() const {
  return rate_of_change_divided_by_n_.size();
}
inline void DiffEqParameters::clear_rate_of_change_divided_by_n() {
  rate_of_change_divided_by_n_.Clear();
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::mutable_rate_of_change_divided_by_n(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.DiffEqParameters.rate_of_change_divided_by_N)
  return rate_of_change_divided_by_n_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >*
DiffEqParameters::mutable_rate_of_change_divided_by_n() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.rate_of_change_divided_by_N)
  return &rate_of_change_divided_by_n_;
}
inline const ::EbitODEMessages::MatrixValue& DiffEqParameters::rate_of_change_divided_by_n(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.rate_of_change_divided_by_N)
  return rate_of_change_divided_by_n_.Get(index);
}
inline ::EbitODEMessages::MatrixValue* DiffEqParameters::add_rate_of_change_divided_by_n() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.rate_of_change_divided_by_N)
  return rate_of_change_divided_by_n_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::MatrixValue >&
DiffEqParameters::rate_of_change_divided_by_n() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.rate_of_change_divided_by_N)
  return rate_of_change_divided_by_n_;
}

// required uint32 no_dimensions = 9;
inline bool DiffEqParameters::has_no_dimensions() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DiffEqParameters::set_has_no_dimensions() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DiffEqParameters::clear_has_no_dimensions() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DiffEqParameters::clear_no_dimensions() {
  no_dimensions_ = 0u;
  clear_has_no_dimensions();
}
inline ::google::protobuf::uint32 DiffEqParameters::no_dimensions() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.no_dimensions)
  return no_dimensions_;
}
inline void DiffEqParameters::set_no_dimensions(::google::protobuf::uint32 value) {
  set_has_no_dimensions();
  no_dimensions_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.no_dimensions)
}

// required double V_0 = 16;
inline bool DiffEqParameters::has_v_0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiffEqParameters::set_has_v_0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiffEqParameters::clear_has_v_0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiffEqParameters::clear_v_0() {
  v_0_ = 0;
  clear_has_v_0();
}
inline double DiffEqParameters::v_0() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.V_0)
  return v_0_;
}
inline void DiffEqParameters::set_v_0(double value) {
  set_has_v_0();
  v_0_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.V_0)
}

// required double r_e = 17;
inline bool DiffEqParameters::has_r_e() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiffEqParameters::set_has_r_e() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DiffEqParameters::clear_has_r_e() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DiffEqParameters::clear_r_e() {
  r_e_ = 0;
  clear_has_r_e();
}
inline double DiffEqParameters::r_e() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.r_e)
  return r_e_;
}
inline void DiffEqParameters::set_r_e(double value) {
  set_has_r_e();
  r_e_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.r_e)
}

// required double r_dt = 18;
inline bool DiffEqParameters::has_r_dt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DiffEqParameters::set_has_r_dt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DiffEqParameters::clear_has_r_dt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DiffEqParameters::clear_r_dt() {
  r_dt_ = 0;
  clear_has_r_dt();
}
inline double DiffEqParameters::r_dt() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.r_dt)
  return r_dt_;
}
inline void DiffEqParameters::set_r_dt(double value) {
  set_has_r_dt();
  r_dt_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.r_dt)
}

// required double l_dt = 19;
inline bool DiffEqParameters::has_l_dt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DiffEqParameters::set_has_l_dt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DiffEqParameters::clear_has_l_dt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DiffEqParameters::clear_l_dt() {
  l_dt_ = 0;
  clear_has_l_dt();
}
inline double DiffEqParameters::l_dt() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.l_dt)
  return l_dt_;
}
inline void DiffEqParameters::set_l_dt(double value) {
  set_has_l_dt();
  l_dt_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.l_dt)
}

// repeated .EbitODEMessages.InitialValue initial_values = 10;
inline int DiffEqParameters::initial_values_size() const {
  return initial_values_.size();
}
inline void DiffEqParameters::clear_initial_values() {
  initial_values_.Clear();
}
inline ::EbitODEMessages::InitialValue* DiffEqParameters::mutable_initial_values(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.DiffEqParameters.initial_values)
  return initial_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::InitialValue >*
DiffEqParameters::mutable_initial_values() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.initial_values)
  return &initial_values_;
}
inline const ::EbitODEMessages::InitialValue& DiffEqParameters::initial_values(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.initial_values)
  return initial_values_.Get(index);
}
inline ::EbitODEMessages::InitialValue* DiffEqParameters::add_initial_values() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.initial_values)
  return initial_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::InitialValue >&
DiffEqParameters::initial_values() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.initial_values)
  return initial_values_;
}

// required double initial_temperature = 11;
inline bool DiffEqParameters::has_initial_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiffEqParameters::set_has_initial_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiffEqParameters::clear_has_initial_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiffEqParameters::clear_initial_temperature() {
  initial_temperature_ = 0;
  clear_has_initial_temperature();
}
inline double DiffEqParameters::initial_temperature() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.initial_temperature)
  return initial_temperature_;
}
inline void DiffEqParameters::set_initial_temperature(double value) {
  set_has_initial_temperature();
  initial_temperature_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.initial_temperature)
}

// required double minimum_N = 12;
inline bool DiffEqParameters::has_minimum_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiffEqParameters::set_has_minimum_n() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiffEqParameters::clear_has_minimum_n() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiffEqParameters::clear_minimum_n() {
  minimum_n_ = 0;
  clear_has_minimum_n();
}
inline double DiffEqParameters::minimum_n() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.minimum_N)
  return minimum_n_;
}
inline void DiffEqParameters::set_minimum_n(double value) {
  set_has_minimum_n();
  minimum_n_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.minimum_N)
}

// repeated double source_terms_n = 13;
inline int DiffEqParameters::source_terms_n_size() const {
  return source_terms_n_.size();
}
inline void DiffEqParameters::clear_source_terms_n() {
  source_terms_n_.Clear();
}
inline double DiffEqParameters::source_terms_n(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.source_terms_n)
  return source_terms_n_.Get(index);
}
inline void DiffEqParameters::set_source_terms_n(int index, double value) {
  source_terms_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.source_terms_n)
}
inline void DiffEqParameters::add_source_terms_n(double value) {
  source_terms_n_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.source_terms_n)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::source_terms_n() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.source_terms_n)
  return source_terms_n_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_source_terms_n() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.source_terms_n)
  return &source_terms_n_;
}

// repeated double source_terms_kt = 14;
inline int DiffEqParameters::source_terms_kt_size() const {
  return source_terms_kt_.size();
}
inline void DiffEqParameters::clear_source_terms_kt() {
  source_terms_kt_.Clear();
}
inline double DiffEqParameters::source_terms_kt(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.DiffEqParameters.source_terms_kt)
  return source_terms_kt_.Get(index);
}
inline void DiffEqParameters::set_source_terms_kt(int index, double value) {
  source_terms_kt_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.DiffEqParameters.source_terms_kt)
}
inline void DiffEqParameters::add_source_terms_kt(double value) {
  source_terms_kt_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.DiffEqParameters.source_terms_kt)
}
inline const ::google::protobuf::RepeatedField< double >&
DiffEqParameters::source_terms_kt() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.DiffEqParameters.source_terms_kt)
  return source_terms_kt_;
}
inline ::google::protobuf::RepeatedField< double >*
DiffEqParameters::mutable_source_terms_kt() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.DiffEqParameters.source_terms_kt)
  return &source_terms_kt_;
}

// -------------------------------------------------------------------

// ProblemParameters

// required .EbitODEMessages.ProblemType problem_type = 1;
inline bool ProblemParameters::has_problem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProblemParameters::set_has_problem_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProblemParameters::clear_has_problem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProblemParameters::clear_problem_type() {
  problem_type_ = 0;
  clear_has_problem_type();
}
inline ::EbitODEMessages::ProblemType ProblemParameters::problem_type() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.ProblemParameters.problem_type)
  return static_cast< ::EbitODEMessages::ProblemType >(problem_type_);
}
inline void ProblemParameters::set_problem_type(::EbitODEMessages::ProblemType value) {
  assert(::EbitODEMessages::ProblemType_IsValid(value));
  set_has_problem_type();
  problem_type_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.ProblemParameters.problem_type)
}

// required .EbitODEMessages.TimeSpan time_span = 2;
inline bool ProblemParameters::has_time_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProblemParameters::set_has_time_span() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProblemParameters::clear_has_time_span() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProblemParameters::clear_time_span() {
  if (time_span_ != NULL) time_span_->Clear();
  clear_has_time_span();
}
inline const ::EbitODEMessages::TimeSpan& ProblemParameters::_internal_time_span() const {
  return *time_span_;
}
inline const ::EbitODEMessages::TimeSpan& ProblemParameters::time_span() const {
  const ::EbitODEMessages::TimeSpan* p = time_span_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.ProblemParameters.time_span)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::TimeSpan*>(
      &::EbitODEMessages::_TimeSpan_default_instance_);
}
inline ::EbitODEMessages::TimeSpan* ProblemParameters::release_time_span() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.ProblemParameters.time_span)
  clear_has_time_span();
  ::EbitODEMessages::TimeSpan* temp = time_span_;
  time_span_ = NULL;
  return temp;
}
inline ::EbitODEMessages::TimeSpan* ProblemParameters::mutable_time_span() {
  set_has_time_span();
  if (time_span_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::TimeSpan>(GetArenaNoVirtual());
    time_span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.ProblemParameters.time_span)
  return time_span_;
}
inline void ProblemParameters::set_allocated_time_span(::EbitODEMessages::TimeSpan* time_span) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_span_;
  }
  if (time_span) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_span = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    set_has_time_span();
  } else {
    clear_has_time_span();
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.ProblemParameters.time_span)
}

// -------------------------------------------------------------------

// SolverParameters

// repeated double saveat = 1;
inline int SolverParameters::saveat_size() const {
  return saveat_.size();
}
inline void SolverParameters::clear_saveat() {
  saveat_.Clear();
}
inline double SolverParameters::saveat(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.SolverParameters.saveat)
  return saveat_.Get(index);
}
inline void SolverParameters::set_saveat(int index, double value) {
  saveat_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.SolverParameters.saveat)
}
inline void SolverParameters::add_saveat(double value) {
  saveat_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.SolverParameters.saveat)
}
inline const ::google::protobuf::RepeatedField< double >&
SolverParameters::saveat() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.SolverParameters.saveat)
  return saveat_;
}
inline ::google::protobuf::RepeatedField< double >*
SolverParameters::mutable_saveat() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.SolverParameters.saveat)
  return &saveat_;
}

// -------------------------------------------------------------------

// SolveODEProblem

// repeated .EbitODEMessages.Nuclide nuclides = 1;
inline int SolveODEProblem::nuclides_size() const {
  return nuclides_.size();
}
inline void SolveODEProblem::clear_nuclides() {
  nuclides_.Clear();
}
inline ::EbitODEMessages::Nuclide* SolveODEProblem::mutable_nuclides(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.SolveODEProblem.nuclides)
  return nuclides_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::Nuclide >*
SolveODEProblem::mutable_nuclides() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.SolveODEProblem.nuclides)
  return &nuclides_;
}
inline const ::EbitODEMessages::Nuclide& SolveODEProblem::nuclides(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.SolveODEProblem.nuclides)
  return nuclides_.Get(index);
}
inline ::EbitODEMessages::Nuclide* SolveODEProblem::add_nuclides() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.SolveODEProblem.nuclides)
  return nuclides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::Nuclide >&
SolveODEProblem::nuclides() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.SolveODEProblem.nuclides)
  return nuclides_;
}

// required .EbitODEMessages.ProblemParameters problem_parameters = 2;
inline bool SolveODEProblem::has_problem_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolveODEProblem::set_has_problem_parameters() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolveODEProblem::clear_has_problem_parameters() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolveODEProblem::clear_problem_parameters() {
  if (problem_parameters_ != NULL) problem_parameters_->Clear();
  clear_has_problem_parameters();
}
inline const ::EbitODEMessages::ProblemParameters& SolveODEProblem::_internal_problem_parameters() const {
  return *problem_parameters_;
}
inline const ::EbitODEMessages::ProblemParameters& SolveODEProblem::problem_parameters() const {
  const ::EbitODEMessages::ProblemParameters* p = problem_parameters_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.SolveODEProblem.problem_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::ProblemParameters*>(
      &::EbitODEMessages::_ProblemParameters_default_instance_);
}
inline ::EbitODEMessages::ProblemParameters* SolveODEProblem::release_problem_parameters() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.SolveODEProblem.problem_parameters)
  clear_has_problem_parameters();
  ::EbitODEMessages::ProblemParameters* temp = problem_parameters_;
  problem_parameters_ = NULL;
  return temp;
}
inline ::EbitODEMessages::ProblemParameters* SolveODEProblem::mutable_problem_parameters() {
  set_has_problem_parameters();
  if (problem_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::ProblemParameters>(GetArenaNoVirtual());
    problem_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.SolveODEProblem.problem_parameters)
  return problem_parameters_;
}
inline void SolveODEProblem::set_allocated_problem_parameters(::EbitODEMessages::ProblemParameters* problem_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete problem_parameters_;
  }
  if (problem_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      problem_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, problem_parameters, submessage_arena);
    }
    set_has_problem_parameters();
  } else {
    clear_has_problem_parameters();
  }
  problem_parameters_ = problem_parameters;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.SolveODEProblem.problem_parameters)
}

// required .EbitODEMessages.DiffEqParameters diff_eq_parameters = 3;
inline bool SolveODEProblem::has_diff_eq_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolveODEProblem::set_has_diff_eq_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolveODEProblem::clear_has_diff_eq_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolveODEProblem::clear_diff_eq_parameters() {
  if (diff_eq_parameters_ != NULL) diff_eq_parameters_->Clear();
  clear_has_diff_eq_parameters();
}
inline const ::EbitODEMessages::DiffEqParameters& SolveODEProblem::_internal_diff_eq_parameters() const {
  return *diff_eq_parameters_;
}
inline const ::EbitODEMessages::DiffEqParameters& SolveODEProblem::diff_eq_parameters() const {
  const ::EbitODEMessages::DiffEqParameters* p = diff_eq_parameters_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.SolveODEProblem.diff_eq_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::DiffEqParameters*>(
      &::EbitODEMessages::_DiffEqParameters_default_instance_);
}
inline ::EbitODEMessages::DiffEqParameters* SolveODEProblem::release_diff_eq_parameters() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.SolveODEProblem.diff_eq_parameters)
  clear_has_diff_eq_parameters();
  ::EbitODEMessages::DiffEqParameters* temp = diff_eq_parameters_;
  diff_eq_parameters_ = NULL;
  return temp;
}
inline ::EbitODEMessages::DiffEqParameters* SolveODEProblem::mutable_diff_eq_parameters() {
  set_has_diff_eq_parameters();
  if (diff_eq_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::DiffEqParameters>(GetArenaNoVirtual());
    diff_eq_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.SolveODEProblem.diff_eq_parameters)
  return diff_eq_parameters_;
}
inline void SolveODEProblem::set_allocated_diff_eq_parameters(::EbitODEMessages::DiffEqParameters* diff_eq_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete diff_eq_parameters_;
  }
  if (diff_eq_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      diff_eq_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, diff_eq_parameters, submessage_arena);
    }
    set_has_diff_eq_parameters();
  } else {
    clear_has_diff_eq_parameters();
  }
  diff_eq_parameters_ = diff_eq_parameters;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.SolveODEProblem.diff_eq_parameters)
}

// required .EbitODEMessages.SolverParameters solver_parameters = 4;
inline bool SolveODEProblem::has_solver_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolveODEProblem::set_has_solver_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolveODEProblem::clear_has_solver_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolveODEProblem::clear_solver_parameters() {
  if (solver_parameters_ != NULL) solver_parameters_->Clear();
  clear_has_solver_parameters();
}
inline const ::EbitODEMessages::SolverParameters& SolveODEProblem::_internal_solver_parameters() const {
  return *solver_parameters_;
}
inline const ::EbitODEMessages::SolverParameters& SolveODEProblem::solver_parameters() const {
  const ::EbitODEMessages::SolverParameters* p = solver_parameters_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.SolveODEProblem.solver_parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::SolverParameters*>(
      &::EbitODEMessages::_SolverParameters_default_instance_);
}
inline ::EbitODEMessages::SolverParameters* SolveODEProblem::release_solver_parameters() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.SolveODEProblem.solver_parameters)
  clear_has_solver_parameters();
  ::EbitODEMessages::SolverParameters* temp = solver_parameters_;
  solver_parameters_ = NULL;
  return temp;
}
inline ::EbitODEMessages::SolverParameters* SolveODEProblem::mutable_solver_parameters() {
  set_has_solver_parameters();
  if (solver_parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::SolverParameters>(GetArenaNoVirtual());
    solver_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.SolveODEProblem.solver_parameters)
  return solver_parameters_;
}
inline void SolveODEProblem::set_allocated_solver_parameters(::EbitODEMessages::SolverParameters* solver_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete solver_parameters_;
  }
  if (solver_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      solver_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, solver_parameters, submessage_arena);
    }
    set_has_solver_parameters();
  } else {
    clear_has_solver_parameters();
  }
  solver_parameters_ = solver_parameters;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.SolveODEProblem.solver_parameters)
}

// -------------------------------------------------------------------

// ValuesPerNuclide

// required .EbitODEMessages.Nuclide nuclide = 1;
inline bool ValuesPerNuclide::has_nuclide() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValuesPerNuclide::set_has_nuclide() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValuesPerNuclide::clear_has_nuclide() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValuesPerNuclide::clear_nuclide() {
  if (nuclide_ != NULL) nuclide_->Clear();
  clear_has_nuclide();
}
inline const ::EbitODEMessages::Nuclide& ValuesPerNuclide::_internal_nuclide() const {
  return *nuclide_;
}
inline const ::EbitODEMessages::Nuclide& ValuesPerNuclide::nuclide() const {
  const ::EbitODEMessages::Nuclide* p = nuclide_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.ValuesPerNuclide.nuclide)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::Nuclide*>(
      &::EbitODEMessages::_Nuclide_default_instance_);
}
inline ::EbitODEMessages::Nuclide* ValuesPerNuclide::release_nuclide() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.ValuesPerNuclide.nuclide)
  clear_has_nuclide();
  ::EbitODEMessages::Nuclide* temp = nuclide_;
  nuclide_ = NULL;
  return temp;
}
inline ::EbitODEMessages::Nuclide* ValuesPerNuclide::mutable_nuclide() {
  set_has_nuclide();
  if (nuclide_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::Nuclide>(GetArenaNoVirtual());
    nuclide_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.ValuesPerNuclide.nuclide)
  return nuclide_;
}
inline void ValuesPerNuclide::set_allocated_nuclide(::EbitODEMessages::Nuclide* nuclide) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nuclide_;
  }
  if (nuclide) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nuclide = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nuclide, submessage_arena);
    }
    set_has_nuclide();
  } else {
    clear_has_nuclide();
  }
  nuclide_ = nuclide;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.ValuesPerNuclide.nuclide)
}

// repeated double values = 2;
inline int ValuesPerNuclide::values_size() const {
  return values_.size();
}
inline void ValuesPerNuclide::clear_values() {
  values_.Clear();
}
inline double ValuesPerNuclide::values(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.ValuesPerNuclide.values)
  return values_.Get(index);
}
inline void ValuesPerNuclide::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.ValuesPerNuclide.values)
}
inline void ValuesPerNuclide::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.ValuesPerNuclide.values)
}
inline const ::google::protobuf::RepeatedField< double >&
ValuesPerNuclide::values() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.ValuesPerNuclide.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
ValuesPerNuclide::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.ValuesPerNuclide.values)
  return &values_;
}

// -------------------------------------------------------------------

// Result

// required .EbitODEMessages.SolveODEProblem problem = 1;
inline bool Result::has_problem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_problem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_problem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_problem() {
  if (problem_ != NULL) problem_->Clear();
  clear_has_problem();
}
inline const ::EbitODEMessages::SolveODEProblem& Result::_internal_problem() const {
  return *problem_;
}
inline const ::EbitODEMessages::SolveODEProblem& Result::problem() const {
  const ::EbitODEMessages::SolveODEProblem* p = problem_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.problem)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::SolveODEProblem*>(
      &::EbitODEMessages::_SolveODEProblem_default_instance_);
}
inline ::EbitODEMessages::SolveODEProblem* Result::release_problem() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Result.problem)
  clear_has_problem();
  ::EbitODEMessages::SolveODEProblem* temp = problem_;
  problem_ = NULL;
  return temp;
}
inline ::EbitODEMessages::SolveODEProblem* Result::mutable_problem() {
  set_has_problem();
  if (problem_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::SolveODEProblem>(GetArenaNoVirtual());
    problem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Result.problem)
  return problem_;
}
inline void Result::set_allocated_problem(::EbitODEMessages::SolveODEProblem* problem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete problem_;
  }
  if (problem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      problem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, problem, submessage_arena);
    }
    set_has_problem();
  } else {
    clear_has_problem();
  }
  problem_ = problem;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Result.problem)
}

// required .EbitODEMessages.ReturnCode return_code = 2;
inline bool Result::has_return_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Result::set_has_return_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Result::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Result::clear_return_code() {
  return_code_ = 0;
  clear_has_return_code();
}
inline ::EbitODEMessages::ReturnCode Result::return_code() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.return_code)
  return static_cast< ::EbitODEMessages::ReturnCode >(return_code_);
}
inline void Result::set_return_code(::EbitODEMessages::ReturnCode value) {
  assert(::EbitODEMessages::ReturnCode_IsValid(value));
  set_has_return_code();
  return_code_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Result.return_code)
}

// required double start_time = 3;
inline bool Result::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline double Result::start_time() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.start_time)
  return start_time_;
}
inline void Result::set_start_time(double value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Result.start_time)
}

// required double stop_time = 4;
inline bool Result::has_stop_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_stop_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_stop_time() {
  stop_time_ = 0;
  clear_has_stop_time();
}
inline double Result::stop_time() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.stop_time)
  return stop_time_;
}
inline void Result::set_stop_time(double value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Result.stop_time)
}

// repeated double times = 5;
inline int Result::times_size() const {
  return times_.size();
}
inline void Result::clear_times() {
  times_.Clear();
}
inline double Result::times(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.times)
  return times_.Get(index);
}
inline void Result::set_times(int index, double value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.Result.times)
}
inline void Result::add_times(double value) {
  times_.Add(value);
  // @@protoc_insertion_point(field_add:EbitODEMessages.Result.times)
}
inline const ::google::protobuf::RepeatedField< double >&
Result::times() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.Result.times)
  return times_;
}
inline ::google::protobuf::RepeatedField< double >*
Result::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.Result.times)
  return &times_;
}

// repeated .EbitODEMessages.ValuesPerNuclide n = 6;
inline int Result::n_size() const {
  return n_.size();
}
inline void Result::clear_n() {
  n_.Clear();
}
inline ::EbitODEMessages::ValuesPerNuclide* Result::mutable_n(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Result.n)
  return n_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >*
Result::mutable_n() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.Result.n)
  return &n_;
}
inline const ::EbitODEMessages::ValuesPerNuclide& Result::n(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.n)
  return n_.Get(index);
}
inline ::EbitODEMessages::ValuesPerNuclide* Result::add_n() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.Result.n)
  return n_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >&
Result::n() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.Result.n)
  return n_;
}

// repeated .EbitODEMessages.ValuesPerNuclide kT = 7;
inline int Result::kt_size() const {
  return kt_.size();
}
inline void Result::clear_kt() {
  kt_.Clear();
}
inline ::EbitODEMessages::ValuesPerNuclide* Result::mutable_kt(int index) {
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Result.kT)
  return kt_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >*
Result::mutable_kt() {
  // @@protoc_insertion_point(field_mutable_list:EbitODEMessages.Result.kT)
  return &kt_;
}
inline const ::EbitODEMessages::ValuesPerNuclide& Result::kt(int index) const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Result.kT)
  return kt_.Get(index);
}
inline ::EbitODEMessages::ValuesPerNuclide* Result::add_kt() {
  // @@protoc_insertion_point(field_add:EbitODEMessages.Result.kT)
  return kt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbitODEMessages::ValuesPerNuclide >&
Result::kt() const {
  // @@protoc_insertion_point(field_list:EbitODEMessages.Result.kT)
  return kt_;
}

// -------------------------------------------------------------------

// ErrorEncountered

// required string msg = 1;
inline bool ErrorEncountered::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorEncountered::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorEncountered::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorEncountered::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ErrorEncountered::msg() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.ErrorEncountered.msg)
  return msg_.GetNoArena();
}
inline void ErrorEncountered::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EbitODEMessages.ErrorEncountered.msg)
}
#if LANG_CXX11
inline void ErrorEncountered::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EbitODEMessages.ErrorEncountered.msg)
}
#endif
inline void ErrorEncountered::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EbitODEMessages.ErrorEncountered.msg)
}
inline void ErrorEncountered::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EbitODEMessages.ErrorEncountered.msg)
}
inline ::std::string* ErrorEncountered::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.ErrorEncountered.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorEncountered::release_msg() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.ErrorEncountered.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorEncountered::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.ErrorEncountered.msg)
}

// -------------------------------------------------------------------

// Message

// required .EbitODEMessages.MessageType msg_type = 1;
inline bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
inline ::EbitODEMessages::MessageType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.msg_type)
  return static_cast< ::EbitODEMessages::MessageType >(msg_type_);
}
inline void Message::set_msg_type(::EbitODEMessages::MessageType value) {
  assert(::EbitODEMessages::MessageType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Message.msg_type)
}

// optional .EbitODEMessages.SolveODEProblem ode_problem = 2;
inline bool Message::has_ode_problem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_ode_problem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_ode_problem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_ode_problem() {
  if (ode_problem_ != NULL) ode_problem_->Clear();
  clear_has_ode_problem();
}
inline const ::EbitODEMessages::SolveODEProblem& Message::_internal_ode_problem() const {
  return *ode_problem_;
}
inline const ::EbitODEMessages::SolveODEProblem& Message::ode_problem() const {
  const ::EbitODEMessages::SolveODEProblem* p = ode_problem_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.ode_problem)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::SolveODEProblem*>(
      &::EbitODEMessages::_SolveODEProblem_default_instance_);
}
inline ::EbitODEMessages::SolveODEProblem* Message::release_ode_problem() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Message.ode_problem)
  clear_has_ode_problem();
  ::EbitODEMessages::SolveODEProblem* temp = ode_problem_;
  ode_problem_ = NULL;
  return temp;
}
inline ::EbitODEMessages::SolveODEProblem* Message::mutable_ode_problem() {
  set_has_ode_problem();
  if (ode_problem_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::SolveODEProblem>(GetArenaNoVirtual());
    ode_problem_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Message.ode_problem)
  return ode_problem_;
}
inline void Message::set_allocated_ode_problem(::EbitODEMessages::SolveODEProblem* ode_problem) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ode_problem_;
  }
  if (ode_problem) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ode_problem = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ode_problem, submessage_arena);
    }
    set_has_ode_problem();
  } else {
    clear_has_ode_problem();
  }
  ode_problem_ = ode_problem;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Message.ode_problem)
}

// optional .EbitODEMessages.Result ode_result = 3;
inline bool Message::has_ode_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_ode_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_ode_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_ode_result() {
  if (ode_result_ != NULL) ode_result_->Clear();
  clear_has_ode_result();
}
inline const ::EbitODEMessages::Result& Message::_internal_ode_result() const {
  return *ode_result_;
}
inline const ::EbitODEMessages::Result& Message::ode_result() const {
  const ::EbitODEMessages::Result* p = ode_result_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.ode_result)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::Result*>(
      &::EbitODEMessages::_Result_default_instance_);
}
inline ::EbitODEMessages::Result* Message::release_ode_result() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Message.ode_result)
  clear_has_ode_result();
  ::EbitODEMessages::Result* temp = ode_result_;
  ode_result_ = NULL;
  return temp;
}
inline ::EbitODEMessages::Result* Message::mutable_ode_result() {
  set_has_ode_result();
  if (ode_result_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::Result>(GetArenaNoVirtual());
    ode_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Message.ode_result)
  return ode_result_;
}
inline void Message::set_allocated_ode_result(::EbitODEMessages::Result* ode_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ode_result_;
  }
  if (ode_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ode_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ode_result, submessage_arena);
    }
    set_has_ode_result();
  } else {
    clear_has_ode_result();
  }
  ode_result_ = ode_result;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Message.ode_result)
}

// optional .EbitODEMessages.Status status = 4;
inline bool Message::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::EbitODEMessages::Status Message::status() const {
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.status)
  return static_cast< ::EbitODEMessages::Status >(status_);
}
inline void Message::set_status(::EbitODEMessages::Status value) {
  assert(::EbitODEMessages::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:EbitODEMessages.Message.status)
}

// optional .EbitODEMessages.ErrorEncountered err = 5;
inline bool Message::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_err() {
  if (err_ != NULL) err_->Clear();
  clear_has_err();
}
inline const ::EbitODEMessages::ErrorEncountered& Message::_internal_err() const {
  return *err_;
}
inline const ::EbitODEMessages::ErrorEncountered& Message::err() const {
  const ::EbitODEMessages::ErrorEncountered* p = err_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.err)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::ErrorEncountered*>(
      &::EbitODEMessages::_ErrorEncountered_default_instance_);
}
inline ::EbitODEMessages::ErrorEncountered* Message::release_err() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Message.err)
  clear_has_err();
  ::EbitODEMessages::ErrorEncountered* temp = err_;
  err_ = NULL;
  return temp;
}
inline ::EbitODEMessages::ErrorEncountered* Message::mutable_err() {
  set_has_err();
  if (err_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::ErrorEncountered>(GetArenaNoVirtual());
    err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Message.err)
  return err_;
}
inline void Message::set_allocated_err(::EbitODEMessages::ErrorEncountered* err) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete err_;
  }
  if (err) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      err = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    set_has_err();
  } else {
    clear_has_err();
  }
  err_ = err;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Message.err)
}

// optional .EbitODEMessages.Progress progress = 6;
inline bool Message::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_progress() {
  if (progress_ != NULL) progress_->Clear();
  clear_has_progress();
}
inline const ::EbitODEMessages::Progress& Message::_internal_progress() const {
  return *progress_;
}
inline const ::EbitODEMessages::Progress& Message::progress() const {
  const ::EbitODEMessages::Progress* p = progress_;
  // @@protoc_insertion_point(field_get:EbitODEMessages.Message.progress)
  return p != NULL ? *p : *reinterpret_cast<const ::EbitODEMessages::Progress*>(
      &::EbitODEMessages::_Progress_default_instance_);
}
inline ::EbitODEMessages::Progress* Message::release_progress() {
  // @@protoc_insertion_point(field_release:EbitODEMessages.Message.progress)
  clear_has_progress();
  ::EbitODEMessages::Progress* temp = progress_;
  progress_ = NULL;
  return temp;
}
inline ::EbitODEMessages::Progress* Message::mutable_progress() {
  set_has_progress();
  if (progress_ == NULL) {
    auto* p = CreateMaybeMessage<::EbitODEMessages::Progress>(GetArenaNoVirtual());
    progress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:EbitODEMessages.Message.progress)
  return progress_;
}
inline void Message::set_allocated_progress(::EbitODEMessages::Progress* progress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete progress_;
  }
  if (progress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      progress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    set_has_progress();
  } else {
    clear_has_progress();
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:EbitODEMessages.Message.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EbitODEMessages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EbitODEMessages::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbitODEMessages::Status>() {
  return ::EbitODEMessages::Status_descriptor();
}
template <> struct is_proto_enum< ::EbitODEMessages::ProblemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbitODEMessages::ProblemType>() {
  return ::EbitODEMessages::ProblemType_descriptor();
}
template <> struct is_proto_enum< ::EbitODEMessages::ReturnCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbitODEMessages::ReturnCode>() {
  return ::EbitODEMessages::ReturnCode_descriptor();
}
template <> struct is_proto_enum< ::EbitODEMessages::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbitODEMessages::MessageType>() {
  return ::EbitODEMessages::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ebit_2dode_2dmessages_2eproto
